// Generated by CoffeeScript 1.8.0
(function() {
  var add, boardIsFull, buildBoard, collapseCells, generateTile, getRow, isGameOver, mergeCells, minutes, move, moveIsValid, noValidMove, printArray, randomCellIndices, randomInt, randomValue, seconds, setRow, shakeNewValue, showBoard, timer, transpose,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  randomInt = function(n) {
    return Math.floor(Math.random() * n);
  };

  randomCellIndices = function() {
    return [randomInt(4), randomInt(4)];
  };

  randomValue = function() {
    var values;
    values = [2, 2, 2, 4];
    return values[randomInt(4)];
  };

  buildBoard = function() {
    var board;
    return board = [0, 1, 2, 3].map(function() {
      return [0, 1, 2, 3].map(function() {
        return 0;
      });
    });
  };

  generateTile = function(board) {
    var column, row, value, _ref;
    console.log("Generating a tile.");
    _ref = randomCellIndices(), row = _ref[0], column = _ref[1];
    console.log("row: " + row + " / column " + column);
    value = randomValue();
    if (board[row][column] === 0) {
      return board[row][column] = value;
    } else {
      return generateTile(board);
    }
  };

  printArray = function(array) {
    var row, _i, _len;
    console.log("--START--");
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      row = array[_i];
      console.log(row);
    }
    return console.log("--END--");
  };

  showBoard = function(board) {
    var col, powerNum, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _k, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          for (powerNum = _k = 1; _k <= 11; powerNum = ++_k) {
            $(".r" + row + ".c" + col).removeClass("val-" + (Math.pow(2, powerNum)));
          }
          if (board[row][col] === 0) {
            _results1.push($(".r" + row + ".c" + col + " > div").html(''));
          } else {
            $(".r" + row + ".c" + col + " > div").html(board[row][col]);
            _results1.push($(".r" + row + ".c" + col).addClass("val-" + board[row][col]));
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  move = function(board, direction) {
    var i, newBoard, newDirection, newRow, row, transposedBackBoard, transposedBoard, _i, _j, _k;
    newBoard = buildBoard();
    if (direction === "right" || direction === "left") {
      for (i = _i = 0; _i <= 3; i = ++_i) {
        row = getRow(i, board);
        mergeCells(row, direction);
        newRow = collapseCells(row, direction);
        setRow(newRow, i, newBoard);
      }
      console.log("Showing new board:", newBoard);
      return newBoard;
    } else if (direction === "up") {
      transposedBackBoard = buildBoard();
      newDirection = "left";
      transposedBoard = transpose(board);
      for (i = _j = 0; _j <= 3; i = ++_j) {
        row = getRow(i, transposedBoard);
        mergeCells(row, newDirection);
        newRow = collapseCells(row, newDirection);
        setRow(newRow, i, newBoard);
      }
      transposedBackBoard = transpose(newBoard);
      console.log("Showing transposed * 2 new board:", transposedBackBoard);
      return transposedBackBoard;
    } else if (direction === "down") {
      transposedBackBoard = buildBoard();
      newDirection = "right";
      transposedBoard = transpose(board);
      for (i = _k = 0; _k <= 3; i = ++_k) {
        row = getRow(i, transposedBoard);
        mergeCells(row, newDirection);
        newRow = collapseCells(row, newDirection);
        setRow(newRow, i, newBoard);
      }
      transposedBackBoard = transpose(newBoard);
      console.log("Showing transposed * 2 new board:", transposedBackBoard);
      return transposedBackBoard;
    }
  };

  getRow = function(r, board) {
    var row;
    console.log("Getting the Row");
    return row = [board[r][0], board[r][1], board[r][2], board[r][3]];
  };

  setRow = function(row, index, board) {
    return board[index] = row;
  };

  mergeCells = function(row, direction) {
    var merge;
    merge = function(row) {
      var a, b, _i, _j, _ref;
      for (a = _i = 3; _i >= 1; a = --_i) {
        for (b = _j = _ref = a - 1; _ref <= 0 ? _j <= 0 : _j >= 0; b = _ref <= 0 ? ++_j : --_j) {
          if (row[a] === 0) {
            break;
          } else if (row[a] === row[b]) {
            row[a] *= 2;
            row[b] = 0;
            break;
          } else if (row[b] !== 0) {
            break;
          }
        }
      }
      return row;
    };
    if (direction === "right") {
      merge(row);
    }
    if (direction === "left") {
      return merge(row.reverse()).reverse();
    }
  };

  collapseCells = function(row, direction) {
    var newRow;
    switch (direction) {
      case 'right':
        newRow = row.filter(function(x) {
          return x > 0;
        });
        while (newRow.length < 4) {
          newRow.unshift(0);
        }
        return newRow;
      case 'left':
        newRow = row.filter(function(x) {
          return x > 0;
        });
        while (newRow.length < 4) {
          newRow.push(0);
        }
        return newRow;
    }
  };

  moveIsValid = function(oriBoard, newBoard) {
    var col, row, _i, _j;
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = 0; _j <= 3; col = ++_j) {
        if (oriBoard[row][col] !== newBoard[row][col]) {
          return true;
        }
      }
    }
    return false;
  };

  shakeNewValue = function(oriBoard, newBoard) {
    var col, row, _i, _results;
    _results = [];
    for (row = _i = 0; _i <= 3; row = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = 0; _j <= 3; col = ++_j) {
          if (oriBoard[row][col] !== newBoard[row][col]) {
            _results1.push($('.r#{row}.c#{col}').toggle("bounce", {
              times: 1
            }, "slow"));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  isGameOver = function(board) {
    return boardIsFull(board) && noValidMove(board);
  };

  boardIsFull = function(board) {
    var row, _i, _len;
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      row = board[_i];
      if (__indexOf.call(row, 0) >= 0) {
        return false;
      }
    }
    console.log("Board is fullllllll");
    return true;
  };

  noValidMove = function(board) {
    var direction, newBoard, _i, _len, _ref;
    _ref = ['left', 'right', 'up', 'down'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      direction = _ref[_i];
      newBoard = move(board, direction);
      if (moveIsValid(board, newBoard)) {
        return false;
      }
    }
    return true;
  };

  transpose = function(board) {
    var col, newBoard, row, value, _i, _j;
    newBoard = buildBoard();
    for (row = _i = 0; _i <= 3; row = ++_i) {
      for (col = _j = -0; _j <= 3; col = ++_j) {
        value = board[row][col];
        newBoard[col][row] = value;
      }
    }
    return newBoard;
  };

  seconds = 0;

  minutes = 0;

  add = function() {
    seconds = seconds + 1;
    $('#sw_s').html(seconds);
    if (seconds >= 60) {
      seconds = 0;
      minutes = minutes + 1;
      $('#sw_m').html(minutes);
    }
    return timer();
  };

  timer = function() {
    return setTimeout(add, 1000);
  };

  $(function() {
    this.board = buildBoard();
    generateTile(this.board);
    generateTile(this.board);
    printArray(this.board);
    showBoard(this.board);
    timer();
    $('#restart, #stopwatch').mouseover(function(event) {
      return $(this).css('font-size', '40px');
    });
    $('#restart, #stopwatch').mouseleave(function(event) {
      return $(this).css('font-size', '30px');
    });
    $('#restart, #stopwatch').click((function(_this) {
      return function(event) {
        return document.location.reload(true);
      };
    })(this));
    return $('body').keydown((function(_this) {
      return function(event) {
        var direction, key, keys, newBoard;
        key = event.which;
        keys = [37, 38, 39, 40];
        if (__indexOf.call(keys, key) >= 0) {
          event.preventDefault();
          direction = (function() {
            switch (key) {
              case 37:
                return "left";
              case 38:
                return "up";
              case 39:
                return "right";
              case 40:
                return "down";
            }
          })();
          console.log("Direction is", direction);
          newBoard = move(_this.board, direction);
          printArray(newBoard);
          if (moveIsValid(_this.board, newBoard)) {
            console.log("valid");
            _this.board = newBoard;
            generateTile(_this.board);
            return showBoard(_this.board);
          } else {
            console.log("invalid");
            if (isGameOver(_this.board)) {
              console.log("You Lose!");
              return $('#lostbox').fadeTo("slow", 0.8);
            }
          }
        }
      };
    })(this));
  });

}).call(this);

//# sourceMappingURL=main.js.map
